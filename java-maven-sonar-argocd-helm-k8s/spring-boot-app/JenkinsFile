pipeline {
    agent {
        docker {
            image 'rakeshvssut/maven-rakesh-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket
        }
    }
    environment {
        GIT_REPO = "https://github.com/rakeshnexturn/Jenkins-Zero-To-Hero.git"
        GIT_BRANCH = "main"
        SONAR_URL = "http://54.183.146.77:9000"
        DOCKER_IMAGE = "rakeshvssut/ultimate-cicd:${BUILD_NUMBER}"
        GIT_USER_NAME = "rakeshnexturn"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    }
    stages {
        stage('Cleanup Workspace') {
            steps {
                script {
                    sh '''
                        echo "Cleaning workspace..."
                        rm -rf *  # Remove all files
                        rm -rf .[^.]*  # Remove hidden files (e.g., .git)
                    '''
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    sh '''
                        echo "Cloning repository..."
                        git clone -b ${GIT_BRANCH} ${GIT_REPO} .
                    '''
                }
            }
        }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config --global user.email "rakesh.vssut2022@gmail.com"
                        git config --global user.name "Rakesh Kumar Sahu"

                        sed -i "s|image: rakeshvssut/ultimate-cicd:[0-9]*|image: rakeshvssut/ultimate-cicd:${BUILD_NUMBER}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
